package org.lazan.t5.graphael.components;

import java.util.List;

import org.apache.tapestry5.BindingConstants;
import org.apache.tapestry5.ComponentResources;
import org.apache.tapestry5.MarkupWriter;
import org.apache.tapestry5.annotations.AfterRenderBody;
import org.apache.tapestry5.annotations.BeginRender;
import org.apache.tapestry5.annotations.Import;
import org.apache.tapestry5.annotations.Parameter;
import org.apache.tapestry5.annotations.SetupRender;
import org.apache.tapestry5.annotations.SupportsInformalParameters;
import org.apache.tapestry5.dom.Element;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.ioc.internal.util.CollectionFactory;
import org.apache.tapestry5.json.JSONArray;
import org.apache.tapestry5.json.JSONObject;
import org.apache.tapestry5.runtime.RenderCommand;
import org.apache.tapestry5.services.Environment;
import org.apache.tapestry5.services.javascript.JavaScriptSupport;
import org.lazan.t5.graphael.model.PieChartModel;
import org.lazan.t5.graphael.model.PieSeriesModel;

@Import(library={ "raphael.js", "g.raphael-min.js", "g.pie-min.js" })
@SupportsInformalParameters
public class PieChart {
	@Parameter(defaultPrefix=BindingConstants.LITERAL, required=true)
	private int locx;

	@Parameter(defaultPrefix=BindingConstants.LITERAL, required=true)
	private int locy;
	
	@Parameter(defaultPrefix=BindingConstants.LITERAL, required=true)
	private int radius;
	
	@Parameter(defaultPrefix=BindingConstants.LITERAL, name="options")
	private JSONObject optionsParam;

	@Parameter(defaultPrefix=BindingConstants.LITERAL)
	private RenderCommand postProcessor;
	
	private String postProcessorMarkup;
	
	@Inject
	private JavaScriptSupport jss;
	
	@Inject
	private Environment environment;
	
	@Inject
	private ComponentResources componentResources;
	
	private List<PieSeriesModel> seriesList;
	
	private boolean doLegend;
	private boolean doColor;

	@SetupRender
	RenderCommand setupRender(MarkupWriter writer) {
		seriesList = CollectionFactory.newList();
		PieChartModel pieModel = new PieChartModel() {
			public void addSeries(PieSeriesModel series) {
				seriesList.add(series);
				if (series.getLabel() != null) {
					doLegend = true;
				}
				if (series.getColor() != null) {
					doColor = true;
				}
			}
		};
		
		// push the model onto the environment so that child components can add to it
		environment.push(PieChartModel.class, pieModel);
		
		if (postProcessor != null) {
			// add a container to the DOM, this will be removed later
			writer.element("container");
			return postProcessor;
		}
		return null;
	}
	
	@BeginRender
	void beginRender(MarkupWriter writer) {
		if (postProcessor != null) {
			Element container = writer.getElement();
			
			// get the markup generated by the postProcessor RenderCommand
			postProcessorMarkup = container.getChildMarkup();
			writer.end();
			
			// remove the element from the DOM
			container.remove();
		}
	}
	
	@AfterRenderBody
	void afterRenderBody(MarkupWriter writer) {
		environment.pop(PieChartModel.class);

		String clientId = jss.allocateClientId(componentResources);
		writer.element("div", "id", clientId);
		componentResources.renderInformalParameters(writer);
		writer.end();
		JSONObject options = optionsParam == null ? new JSONObject() : new JSONObject(optionsParam.toCompactString());
		JSONArray values = new JSONArray();
		for (PieSeriesModel series : seriesList) {
			values.put(series.getValue());
			if (doLegend) options.append("legend", series.getLabel());
			if (doColor) options.append("colors", series.getColor());
		}

		String script = String.format(
			"var r = Raphael('%s'); " +
			"var chart = r.piechart(%s, %s, %s, %s, %s); ",
			clientId, locx, locy, radius, values.toCompactString(), options.toCompactString()
		);
		if (postProcessorMarkup != null) {
			script += String.format("(%s)(chart, r);", postProcessorMarkup);
		}
		jss.addScript(String.format("(function() {%s})()", script));
	}
}
